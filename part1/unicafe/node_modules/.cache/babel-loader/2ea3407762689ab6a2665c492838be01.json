{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/fullstackopen.com/part1/unicafe/src/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  handleClick,\n  text\n}) => /*#__PURE__*/React.createElement(\"button\", {\n  onClick: handleClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }\n}, text);\n\nconst Statistic = props => /*#__PURE__*/React.createElement(\"tr\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, props.text), /*#__PURE__*/React.createElement(\"td\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 26\n  }\n}, props.value, \" \", props.percentage));\n\nconst Statistics = props => {\n  if (props.total === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    }, \"No feedback given\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Statistic, {\n    text: \"good\",\n    value: props.good,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"neutral\",\n    value: props.neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"bad\",\n    value: props.bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"total\",\n    value: props.total,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"average\",\n    value: props.average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"positive\",\n    value: props.positive,\n    percentage: \"%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [average, setAverage] = useState(0);\n  const [positive, setPositive] = useState(0);\n  useEffect(() => {\n    setTotal(good + neutral + bad);\n\n    if (total !== 0) {\n      setAverage((good - bad) / total);\n      setPositive(good / total * 100);\n    }\n  }, [good, neutral, bad, total]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"give feedback\"), /*#__PURE__*/React.createElement(Button, {\n    handleClick: () => setGood(good + 1),\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: () => setNeutral(neutral + 1),\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: () => setBad(bad + 1),\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"statistics\"), /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    total: total,\n    average: average,\n    positive: positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Applications/MAMP/htdocs/fullstackopen.com/part1/unicafe/src/index.js"],"names":["React","useState","useEffect","ReactDOM","Button","handleClick","text","Statistic","props","value","percentage","Statistics","total","good","neutral","bad","average","positive","App","setGood","setNeutral","setBad","setTotal","setAverage","setPositive","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({handleClick, text}) => (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n)\n\nconst Statistic = (props) => (\n  <tr>\n    <td>{props.text}</td><td>{props.value} {props.percentage}</td>\n  </tr>\n)\n\nconst Statistics = (props) => {\n  if(props.total===0) {\n    return <div>No feedback given</div>\n  }    \n\n  return(\n    <table>\n      <tbody>\n        <Statistic text=\"good\" value={props.good} />\n        <Statistic text=\"neutral\" value={props.neutral} />\n        <Statistic text=\"bad\" value={props.bad} />\n        <Statistic text=\"total\" value={props.total} />\n        <Statistic text=\"average\" value={props.average} />\n        <Statistic text=\"positive\" value={props.positive} percentage=\"%\" />\n      </tbody>\n    </table>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [total, setTotal] = useState(0)\n  const [average, setAverage] = useState(0)\n  const [positive, setPositive] = useState(0)\n\n  useEffect(\n    () => {\n      setTotal(good+neutral+bad)\n\n      if(total !== 0) {\n        setAverage((good-bad)/total)\n        setPositive((good/total)*100)\n      }\n    },\n    [good, neutral, bad, total],\n  )\n\n  return (\n    <div>\n      <h2>give feedback</h2>\n      <Button handleClick={() => setGood(good+1)} text=\"good\" />\n      <Button handleClick={() => setNeutral(neutral+1)} text=\"neutral\" />\n      <Button handleClick={() => setBad(bad+1)} text=\"bad\" />\n      <h2>statistics</h2>\n      <Statistics good={good} neutral={neutral} bad={bad} total={total} average={average} positive={positive} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}