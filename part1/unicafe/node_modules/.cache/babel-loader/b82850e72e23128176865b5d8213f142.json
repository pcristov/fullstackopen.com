{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/fullstackopen.com/part1/unicafe/src/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  handleClick,\n  text\n}) => /*#__PURE__*/React.createElement(\"button\", {\n  onClick: handleClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }\n}, text);\n\nconst Statistics = props => {\n  let [total, setTotal] = useState(0);\n  let [average, setAverage] = useState(0);\n  let [positive, setPositive] = useState(0);\n  useEffect(() => {\n    setTotal(props.good + props.neutral + props.bad);\n\n    if (total !== 0) {\n      setAverage((props.good - props.bad) / total);\n      setPositive(props.good / total * 100);\n    }\n  }, [props.good, props.neutral, props.bad, total]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"statistics\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, \"good \", props.good), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, \"neutral \", props.neutral), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"bad \", props.bad), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"all \", total), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"average \", average), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"positive \", positive, \"%\"));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, \"give feedback\"), /*#__PURE__*/React.createElement(Button, {\n    handleClick: () => setGood(good + 1),\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: () => setNeutral(neutral + 1),\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    handleClick: () => setBad(bad + 1),\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Applications/MAMP/htdocs/fullstackopen.com/part1/unicafe/src/index.js"],"names":["React","useState","useEffect","ReactDOM","Button","handleClick","text","Statistics","props","total","setTotal","average","setAverage","positive","setPositive","good","neutral","bad","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({handleClick, text}) => (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n)\n\nconst Statistics = (props) => {\n  let [total, setTotal] = useState(0)\n  let [average, setAverage] = useState(0)\n  let [positive, setPositive] = useState(0)\n\n  useEffect(\n    () => {\n      setTotal(props.good+props.neutral+props.bad)\n\n      if(total !== 0) {\n        setAverage((props.good-props.bad)/total)\n        setPositive((props.good/total)*100)\n      }\n    },\n    [props.good, props.neutral, props.bad, total],\n  )\n\n  return (\n    <div>\n      <h2>statistics</h2>\n      <div>good {props.good}</div>\n      <div>neutral {props.neutral}</div>\n      <div>bad {props.bad}</div>\n      <div>all {total}</div>\n      <div>average {average}</div>\n      <div>positive {positive}%</div>\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button handleClick={() => setGood(good + 1)} text=\"good\" />\n      <Button handleClick={() => setNeutral(neutral + 1)} text=\"neutral\" />\n      <Button handleClick={() => setBad(bad + 1)} text=\"bad\" />\n      <Statistics good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}